// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;
 

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.Constants.DriveTrainConstants;
import frc.robot.commands.DriveTrainArcade;
import edu.wpi.first.wpilibj.motorcontrol.Spark;
import edu.wpi.first.wpilibj.ADIS16470_IMU;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private MotorControllerGroup driveTrainGroupLeft;
private MotorControllerGroup driveTrainGroupRight;
private DifferentialDrive differentialDrive1;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
    //m_Gyro = new ADIS16470_IMU(); 

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     Spark spark1 = new Spark(1); // 1 is the RIO PWM port this is connected to 
     spark1.setInverted(true);
     Spark spark2 = new Spark(2); // 2 is the RIO PWM port this is connected to
     spark2.setInverted(true);
     Spark spark3 = new Spark(3); // 3 is the RIO PWM port this is connected to
     Spark spark4 = new Spark(4); // 4 is the RIO PWM port this is connected to
     driveTrainGroupLeft = new MotorControllerGroup(spark3, spark4);
     driveTrainGroupRight = new MotorControllerGroup(spark1, spark2);  
     differentialDrive1 = new DifferentialDrive(driveTrainGroupLeft, driveTrainGroupRight);
    }

    
    public void initialize() {

        setDefaultCommand(new DriveTrainArcade(this));
        //this.arcadeDrive(0.2,0.2);
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void arcadeDrive(double power, double turnpower) {
        boolean squareInputsToReduceSenstivityAtLowSpeeds = true;
        differentialDrive1.arcadeDrive(power, turnpower, squareInputsToReduceSenstivityAtLowSpeeds);
    }

    public void tankDrive(double leftPower, double rightPower){
        differentialDrive1.tankDrive(leftPower, rightPower);
    }
    
} 